generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             Int              @id @default(autoincrement())
    username       String           @unique
    prolificId     String           @default("")
    password       String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    hasBackground  Boolean          @default(false)
    consent        Boolean          @default(false)
    admin          Boolean          @default(false)
    BackgroundInfo BackgroundInfo[]
    TaskResponse   TaskResponse[]
}

model BackgroundInfo {
    id        Int    @id @default(autoincrement())
    gender    String
    race      String
    agerange  String
    highested String
    userId    Int
    User      User   @relation(fields: [userId], references: [id])
}

model Task {
    id                    Int                    @id @default(autoincrement())
    url                   String
    startTime             Int
    endTime               Int
    instructions          String
    comparisonDescription String                 @default("")
    attempts              Int                    @default(10)
    isActive              Boolean                @default(true)
    embedding             Unsupported("vector")?
    TaskResponse          TaskResponse[]
}

model TaskResponse {
    id                          Int                           @id @default(autoincrement())
    taskId                      Int
    task                        Task                          @relation(fields: [taskId], references: [id])
    userId                      Int
    user                        User                          @relation(fields: [userId], references: [id])
    attempt                     Int
    cosineSimilarity            Float
    userDescription             String
    embedding                   Unsupported("vector")?
    createdAt                   DateTime                      @default(now())
    updatedAt                   DateTime?                     @updatedAt
    transformedCosineSimilarity TransformedCosineSimilarity[]
}

model TransformedCosineSimilarity {
    id                       Int          @id @default(autoincrement())
    taskResponseId           Int
    taskResponse             TaskResponse @relation(fields: [taskResponseId], references: [id])
    cosineSimilarity         Float
    oneMinusCosineSimilarity Float
    loggedValue              Float
    absoluteValue            Float
    dividedValue             Float
    normalizedValue          Float
    createdAt                DateTime     @default(now())
    updatedAt                DateTime?    @updatedAt
}
